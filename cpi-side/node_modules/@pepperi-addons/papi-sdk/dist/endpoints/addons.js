"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddonEndpoint = void 0;
const endpoint_1 = __importDefault(require("../endpoint"));
class InstalledAddonEnpoint {
    constructor(service, addonUUID) {
        this.service = service;
        this.addonUUID = addonUUID;
    }
    async install(version = '') {
        if (version)
            return await this.service.post(`/addons/installed_addons/${this.addonUUID}/install/${version}`);
        else
            return await this.service.post(`/addons/installed_addons/${this.addonUUID}/install`);
    }
    async uninstall() {
        return await this.service.post(`/addons/installed_addons/${this.addonUUID}/uninstall`);
    }
    async upgrade(version = '') {
        if (version)
            return await this.service.post(`/addons/installed_addons/${this.addonUUID}/upgrade/${version}`);
        else
            return await this.service.post(`/addons/installed_addons/${this.addonUUID}/upgrade`);
    }
    async downgrade(version) {
        return await this.service.post(`/addons/installed_addons/${this.addonUUID}/downgrade/${version}`);
    }
    async get() {
        return await this.service.get(`/addons/installed_addons/${this.addonUUID}`);
    }
}
class InstalledAddonsEnpoint extends endpoint_1.default {
    constructor(service) {
        super(service, '/addons/installed_addons');
    }
    addonUUID(uuid) {
        return new InstalledAddonEnpoint(this.service, uuid);
    }
}
class AddonApiEndpoint {
    constructor(service) {
        this.service = service;
        this.options = {
            uuid: '',
            file: '',
            func: '',
            version: '',
            sync: true,
            queryString: '',
        };
    }
    uuid(uuid) {
        this.options.uuid = uuid;
        return this;
    }
    file(fileName) {
        this.options.file = fileName;
        return this;
    }
    func(functionName) {
        this.options.func = functionName;
        return this;
    }
    sync() {
        this.options.sync = true;
        return this;
    }
    async() {
        this.options.sync = false;
        return this;
    }
    async get(params = {}) {
        const url = this.GetAddonApiUrl(params);
        return await this.service.get(url);
    }
    async post(params = {}, body = undefined) {
        const url = this.GetAddonApiUrl(params);
        return await this.service.post(url, body);
    }
    GetAddonApiUrl(params = {}) {
        let asyncPart = '';
        if (!this.options.sync) {
            asyncPart = '/async';
        }
        const url = '/addons/api' + asyncPart + `/${this.options.uuid}/${this.options.file}/${this.options.func}`;
        const queryString = endpoint_1.default.encodeQueryParams(params);
        return queryString ? url + '?' + queryString : url;
    }
}
class AddonVersionEndpoint extends endpoint_1.default {
    constructor(service) {
        super(service, '/addons/versions');
    }
}
class TableEndpoint extends endpoint_1.default {
    constructor(service, addonUUID, tableName) {
        super(service, `/addons/data/${addonUUID}/${tableName}`);
        this.addonUUID = addonUUID;
        this.tableName = tableName;
    }
    key(keyName) {
        return {
            get: async () => {
                return await this.service.get(`/addons/data/${this.addonUUID}/${this.tableName}/${keyName}`);
            },
            hardDelete: async (force = false) => {
                return await this.service.post(`/addons/data/${this.addonUUID}/${this.tableName}/${keyName}/hard_delete`, {
                    Force: force,
                });
            },
        };
    }
}
class AddonEndpoint extends endpoint_1.default {
    constructor(service) {
        super(service, '/addons');
        this.installedAddons = new InstalledAddonsEnpoint(this.service);
        this.versions = new AddonVersionEndpoint(this.service);
        this.api = new AddonApiEndpoint(this.service);
        // data = new AddonDataEndpoint(this.service);
        this.data = {
            schemes: {
                get: async (params) => {
                    let url = '/addons/data/schemes';
                    const query = endpoint_1.default.encodeQueryParams(params);
                    url = query ? url + '?' + query : url;
                    return await this.service.get(url);
                },
                name: (name) => {
                    return {
                        get: async () => {
                            return await this.service.get(`/addons/data/schemes/${name}`);
                        },
                    };
                },
                post: async (body) => {
                    return await this.service.post('/addons/data/schemes', body);
                },
            },
            uuid: (addonUUID) => {
                return {
                    table: (tableName) => {
                        return new TableEndpoint(this.service, addonUUID, tableName);
                    },
                };
            },
            relations: new endpoint_1.default(this.service, '/addons/data/relations'),
        };
    }
}
exports.AddonEndpoint = AddonEndpoint;
