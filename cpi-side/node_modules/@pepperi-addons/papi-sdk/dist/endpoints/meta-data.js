"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Settings = exports.Fields = exports.SubTypes = exports.Types = exports.TypeMetaData = exports.DistributorFlagsEndpoint = void 0;
const endpoint_1 = __importDefault(require("../endpoint"));
class DistributorFlagsEndpoint {
    constructor(service) {
        this.service = service;
        this.options = {
            name: '',
        };
    }
    name(flagName) {
        this.options.name = flagName;
        return this;
    }
    async get() {
        return await this.service.get(`/meta_data/flags/${this.options.name}`);
    }
}
exports.DistributorFlagsEndpoint = DistributorFlagsEndpoint;
class TypeMetaData {
    constructor(service, typeObject) {
        this.service = service;
        this.typeObject = typeObject;
        this.types = new Types(this.service, this.typeObject);
        this.fields = new Fields(this.service, this.typeObject);
    }
}
exports.TypeMetaData = TypeMetaData;
class Types {
    constructor(service, typeName) {
        this.service = service;
        this.typeName = typeName;
        this.fields = new Fields(this.service, this.typeName);
    }
    subtype(subtypeid) {
        return new SubTypes(this.service, this.typeName, subtypeid);
    }
    async get() {
        const url = `/meta_data/${this.typeName}/types`;
        return await this.service.get(url);
    }
}
exports.Types = Types;
class SubTypes {
    constructor(service, typeName, subtype) {
        this.service = service;
        this.typeName = typeName;
        this.subtype = subtype;
        this.fields = new Fields(this.service, this.typeName, this.subtype);
        this.settings = new Settings(this.service, this.typeName, this.subtype);
    }
    async get() {
        const url = `/meta_data/${this.typeName}/types/${this.subtype}`;
        return await this.service.get(url);
    }
    async addons() {
        const url = `/meta_data/${this.typeName}/types/${this.subtype}/addons`;
        return await this.service.get(url);
    }
}
exports.SubTypes = SubTypes;
class Fields {
    constructor(service, type, subtypeid) {
        this.service = service;
        this.type = type;
        this.subtypeid = subtypeid;
    }
    async get(p = {
        include_owned: true,
        include_internal: false,
    }) {
        let url = this.createUrl();
        if (typeof p === 'string') {
            if (p) {
                url = `${url}/${p}`;
            }
        }
        else if (typeof p === 'object') {
            const queryString = endpoint_1.default.encodeQueryParams(p);
            url = queryString ? url + '?' + queryString : url;
        }
        return await this.service.get(url);
    }
    async upsert(body) {
        const url = this.createUrl();
        return await this.service.post(url, body);
    }
    async delete(FieldID) {
        let url = this.createUrl();
        url = `${url}/${FieldID}`;
        return await this.service
            .delete(url)
            .then((res) => res.text())
            .then((res) => (res ? JSON.parse(res) : ''));
    }
    createUrl() {
        let url = `/meta_data/${this.type}`;
        if (this.subtypeid) {
            url = `${url}/types/${this.subtypeid}`;
        }
        return (url = `${url}/fields`);
    }
}
exports.Fields = Fields;
class Settings {
    constructor(service, type, subtypeid) {
        this.service = service;
        this.type = type;
        this.subtypeid = subtypeid;
    }
    async get() {
        const url = `/meta_data/${this.type}/types/${this.subtypeid}/settings`;
        return await this.service.get(url);
    }
    async update(body) {
        const url = `/meta_data/${this.type}/types/${this.subtypeid}/settings`;
        return await this.service.post(url, body);
    }
}
exports.Settings = Settings;
