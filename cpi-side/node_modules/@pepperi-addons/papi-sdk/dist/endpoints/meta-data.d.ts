import { PapiClient } from '../papi-client';
import { ApiFieldObject, ATDSettings, ATDMetaData } from '../entities';
export declare class DistributorFlagsEndpoint {
    private service;
    private options;
    constructor(service: PapiClient);
    name(flagName: string): this;
    get(): Promise<any>;
}
export declare class TypeMetaData {
    private service;
    private typeObject;
    constructor(service: PapiClient, typeObject: string);
    types: Types;
    fields: Fields;
}
export declare class Types {
    private service;
    private typeName;
    constructor(service: PapiClient, typeName: string);
    subtype(subtypeid: string): SubTypes;
    get(): Promise<ATDMetaData[]>;
    fields: Fields;
}
export declare class SubTypes {
    private service;
    private typeName;
    private subtype;
    constructor(service: PapiClient, typeName: string, subtype: string);
    get(): Promise<ATDMetaData>;
    fields: Fields;
    settings: Settings;
    addons(): Promise<ATDMetaData>;
}
export declare class Fields {
    private service;
    private type;
    private subtypeid?;
    constructor(service: PapiClient, type: string, subtypeid?: string | undefined);
    get(apiName: string): Promise<ApiFieldObject>;
    get(params?: {
        include_owned?: boolean;
        include_internal?: boolean;
    }): Promise<ApiFieldObject[]>;
    upsert(body: ApiFieldObject): Promise<ApiFieldObject>;
    delete(FieldID: string): Promise<boolean>;
    private createUrl;
}
export declare class Settings {
    private service;
    private type;
    private subtypeid;
    constructor(service: PapiClient, type: string, subtypeid: string);
    get(): Promise<ATDSettings>;
    update(body: ATDSettings): Promise<ATDSettings>;
}
