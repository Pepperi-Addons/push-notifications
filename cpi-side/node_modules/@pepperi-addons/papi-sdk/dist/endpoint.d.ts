import { PapiClient } from './index';
import { BatchApiResponse, ExportApiResponse } from './entities';
export interface FindOptions {
    fields?: string[];
    where?: string;
    order_by?: string;
    page?: number;
    page_size?: number;
    include_nested?: boolean;
    full_mode?: boolean;
    include_deleted?: boolean;
    is_distinct?: boolean;
}
export declare class IterableEndpoint<T> {
    protected service: PapiClient;
    protected endpoint: string;
    constructor(service: PapiClient, endpoint: string);
    find(options?: FindOptions): Promise<T[]>;
    getEndpointURL(): string;
    iter(options?: FindOptions): {
        [Symbol.asyncIterator](): AsyncIterator<T>;
        toArray: () => Promise<T[]>;
    };
    private getFirstPage;
}
export default class Endpoint<T> extends IterableEndpoint<T> {
    protected service: PapiClient;
    protected endpoint: string;
    constructor(service: PapiClient, endpoint: string);
    count(): Promise<number>;
    count(options: {
        where?: string;
        include_deleted?: boolean;
    }): Promise<number>;
    count(options: {
        where?: string;
        include_deleted?: boolean;
        group_by: string;
    }): Promise<{
        [key in string | number]: number;
    }>;
    get(id: number): Promise<T>;
    upsert(object: T): Promise<T>;
    batch(objects: T[]): Promise<BatchApiResponse[]>;
    export(options: FindOptions): Promise<ExportApiResponse>;
    delete(id: number): Promise<boolean>;
    uuid(uuid: string): {
        get: () => Promise<T>;
    };
    static encodeQueryParams(params: any): string;
}
