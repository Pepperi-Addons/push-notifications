"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PapiClient = void 0;
const endpoint_1 = __importStar(require("./endpoint"));
const endpoints_1 = require("./endpoints");
const papi_module_1 = require("./papi-module");
class PapiClient {
    constructor(options) {
        this.options = options;
        this.metaData = {
            userDefinedTables: new endpoint_1.default(this, '/meta_data/user_defined_tables'),
            flags: new endpoints_1.DistributorFlagsEndpoint(this),
            type: (typeObject) => {
                return new endpoints_1.TypeMetaData(this, typeObject);
            },
            dataViews: new endpoint_1.default(this, '/meta_data/data_views'),
            pepperiObjects: new endpoint_1.default(this, '/meta_data/pepperiObjects'),
        };
        this.userDefinedTables = new endpoint_1.default(this, '/user_defined_tables');
        this.addons = new endpoints_1.AddonEndpoint(this);
        this.codeJobs = new endpoints_1.CodeJobsEndpoint(this);
        this.activities = new endpoint_1.default(this, '/activities');
        this.transactions = new endpoint_1.default(this, '/transactions');
        this.allActivities = new endpoint_1.default(this, '/all_activities');
        this.accounts = new endpoint_1.default(this, '/accounts');
        this.users = new endpoint_1.default(this, '/users');
        this.uiControls = new endpoint_1.default(this, '/uicontrols');
        this.profiles = new endpoint_1.default(this, '/profiles');
        this.fileStorage = new endpoints_1.FileStorageEndpoint(this);
        this.maintenance = new endpoints_1.MaintenanceEndpoint(this);
        this.auditLogs = new endpoints_1.AuditLogsEndpoint(this);
        this.types = new endpoint_1.IterableEndpoint(this, '/types');
        this.catalogs = new endpoint_1.default(this, '/catalogs');
        this.application = {
            sync: new endpoints_1.SyncEndpoint(this),
        };
        this.items = new endpoint_1.default(this, '/items');
        this.transactionLines = new endpoint_1.default(this, '/transaction_lines');
        this.contacts = new endpoint_1.default(this, '/contacts');
        this.images = new endpoint_1.default(this, '/images');
        this.notification = new endpoints_1.NotificationEndpoint(this);
        this.pages = new endpoint_1.default(this, '/pages');
        this.userDefinedCollections = {
            schemes: new endpoints_1.SchemesEndpoint(this),
            documents: (collectionName) => {
                return new endpoint_1.default(this, `/user_defined_collections/${collectionName}`);
            },
        };
    }
    async get(url) {
        return this.apiCall('GET', url)
            .then((res) => res.text())
            .then((res) => (res ? JSON.parse(res) : ''));
    }
    async post(url, body = undefined, headers = undefined) {
        return this.apiCall('POST', url, body, headers)
            .then((res) => res.text())
            .then((res) => (res ? JSON.parse(res) : ''));
    }
    async delete(url) {
        return this.apiCall('DELETE', url);
    }
    async apiCall(method, url, body = undefined, headers = undefined) {
        const fullURL = this.options.baseURL + url;
        const options = {
            method: method,
            headers: Object.assign({ authorization: 'Bearer ' + this.options.token }, headers),
        };
        if (body) {
            options.body = JSON.stringify(body);
        }
        if (this.options.addonUUID) {
            options.headers['X-Pepperi-OwnerID'] = this.options.addonUUID;
        }
        if (this.options.addonSecretKey) {
            options.headers['X-Pepperi-SecretKey'] = this.options.addonSecretKey;
        }
        if (this.options.actionUUID) {
            options.headers['X-Pepperi-ActionID'] = this.options.actionUUID;
        }
        const performance = papi_module_1.getPerformance();
        const t0 = performance === null || performance === void 0 ? void 0 : performance.now();
        const res = await papi_module_1.papi_fetch(fullURL, options);
        const t1 = performance === null || performance === void 0 ? void 0 : performance.now();
        if (!this.options.suppressLogging) {
            const diff = t0 && t1 ? (t1 - t0).toFixed(2) : 0;
            console.log(method, fullURL, 'took', diff, 'milliseconds');
        }
        if (!res.ok) {
            // try parsing error as json
            let error = '';
            try {
                error = JSON.stringify(await res.json());
            }
            catch (_a) { }
            throw new Error(`${fullURL} failed with status: ${res.status} - ${res.statusText} error: ${error}`);
        }
        return res;
    }
}
exports.PapiClient = PapiClient;
