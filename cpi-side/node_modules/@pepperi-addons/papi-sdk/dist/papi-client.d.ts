import Endpoint, { IterableEndpoint } from './endpoint';
import { AddonEndpoint, CodeJobsEndpoint, DistributorFlagsEndpoint, TypeMetaData, MaintenanceEndpoint, AuditLogsEndpoint, SyncEndpoint, FileStorageEndpoint, NotificationEndpoint, SchemesEndpoint } from './endpoints';
import { UserDefinedTableMetaData, UserDefinedTableRow, Account, GeneralActivity, Transaction, User, UIControl, Profile, PepperiObject, Type, Catalog, Item, TransactionLines, Contact, Image, Page, DataView, AddonData } from './entities';
declare type HttpMethod = 'POST' | 'GET' | 'PUT' | 'DELETE';
interface PapiClientOptions {
    token: string;
    baseURL: string;
    addonUUID?: string;
    suppressLogging?: boolean;
    addonSecretKey?: string;
    actionUUID?: string;
}
export declare class PapiClient {
    private options;
    metaData: {
        userDefinedTables: Endpoint<UserDefinedTableMetaData>;
        flags: DistributorFlagsEndpoint;
        type: (typeObject: string) => TypeMetaData;
        dataViews: Endpoint<DataView>;
        pepperiObjects: Endpoint<PepperiObject>;
    };
    userDefinedTables: Endpoint<UserDefinedTableRow>;
    addons: AddonEndpoint;
    codeJobs: CodeJobsEndpoint;
    activities: Endpoint<GeneralActivity>;
    transactions: Endpoint<Transaction>;
    allActivities: Endpoint<GeneralActivity | Transaction>;
    accounts: Endpoint<Account>;
    users: Endpoint<User>;
    uiControls: Endpoint<UIControl>;
    profiles: Endpoint<Profile>;
    fileStorage: FileStorageEndpoint;
    maintenance: MaintenanceEndpoint;
    auditLogs: AuditLogsEndpoint;
    types: IterableEndpoint<Type>;
    catalogs: Endpoint<Catalog>;
    application: {
        sync: SyncEndpoint;
    };
    items: Endpoint<Item>;
    transactionLines: Endpoint<TransactionLines>;
    contacts: Endpoint<Contact>;
    images: Endpoint<Image>;
    notification: NotificationEndpoint;
    pages: Endpoint<Page>;
    userDefinedCollections: {
        schemes: SchemesEndpoint;
        documents: (collectionName: string) => Endpoint<AddonData>;
    };
    constructor(options: PapiClientOptions);
    get(url: string): Promise<any>;
    post(url: string, body?: any, headers?: any): Promise<any>;
    delete(url: string): Promise<any>;
    apiCall(method: HttpMethod, url: string, body?: any, headers?: any): Promise<import("node-fetch").Response>;
}
export {};
