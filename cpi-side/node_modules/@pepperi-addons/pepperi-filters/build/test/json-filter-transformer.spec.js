"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("mocha");
const chai_1 = require("chai");
const json_filter_transformer_1 = require("../json-filter-transformer");
// Creating tranformer for use in all the tests
// The fieldNames are real life examples for the DataViews model
// which is built on the UIControl model
const transformer = new json_filter_transformer_1.JSONFilterTransformer({
    // // Type doesn't exist on UIControls
    Type: false,
    // // Context.Name maps to part of UIControl.Type
    'Context.Name': (node) => {
        // no matter what the operation - it is alway only contains
        node.Operation = 'Contains';
        node.ApiName = 'Type';
    },
    // Context.ScreenSize maps to the suffix of UIControl.Type
    'Context.ScreenSize': (node) => {
        const screenSize = node.Values[0];
        if (screenSize == 'Tablet') {
            // default
            return false;
        }
        node.Operation = 'EndWith';
        node.ApiName = 'Type';
    },
});
describe('One Level', () => {
    const tests = [
        {
            title: 'No changes',
            input: {
                FieldType: 'Bool',
                ApiName: 'Hidden',
                Operation: 'IsEqual',
                Values: [],
            },
            expected: {
                FieldType: 'Bool',
                ApiName: 'Hidden',
                Operation: 'IsEqual',
                Values: [],
            },
        },
        {
            title: 'Transformed',
            input: {
                FieldType: 'String',
                ApiName: 'Context.Name',
                Operation: 'IsEqual',
                Values: ['OrderMenu'],
            },
            expected: {
                FieldType: 'String',
                ApiName: 'Type',
                Operation: 'Contains',
                Values: ['OrderMenu'],
            },
        },
        {
            title: 'Not supported',
            input: {
                FieldType: 'String',
                ApiName: 'Type',
                Operation: 'IsEqual',
                Values: ['Grid'],
            },
            expected: undefined,
        },
    ];
    tests.forEach((test) => {
        it(test.title, () => {
            chai_1.expect(transformer.transform(test.input)).to.be.eql(test.expected);
        });
    });
});
describe('Two Levels', () => {
    const tests = [
        {
            title: 'No changes (AND)',
            input: {
                Operation: 'AND',
                LeftNode: {
                    FieldType: 'Bool',
                    ApiName: 'Hidden',
                    Operation: 'IsEqual',
                    Values: [],
                },
                RightNode: {
                    FieldType: 'DateTime',
                    ApiName: 'CreationDate',
                    Operation: 'IsNotEmpty',
                    Values: [],
                },
            },
            expected: {
                Operation: 'AND',
                LeftNode: {
                    FieldType: 'Bool',
                    ApiName: 'Hidden',
                    Operation: 'IsEqual',
                    Values: [],
                },
                RightNode: {
                    FieldType: 'DateTime',
                    ApiName: 'CreationDate',
                    Operation: 'IsNotEmpty',
                    Values: [],
                },
            },
        },
        {
            title: 'No changes (OR)',
            input: {
                Operation: 'OR',
                LeftNode: {
                    FieldType: 'Bool',
                    ApiName: 'Hidden',
                    Operation: 'IsEqual',
                    Values: [],
                },
                RightNode: {
                    FieldType: 'DateTime',
                    ApiName: 'CreationDate',
                    Operation: 'IsNotEmpty',
                    Values: [],
                },
            },
            expected: {
                Operation: 'OR',
                LeftNode: {
                    FieldType: 'Bool',
                    ApiName: 'Hidden',
                    Operation: 'IsEqual',
                    Values: [],
                },
                RightNode: {
                    FieldType: 'DateTime',
                    ApiName: 'CreationDate',
                    Operation: 'IsNotEmpty',
                    Values: [],
                },
            },
        },
        {
            title: 'Transformed (AND)',
            input: {
                Operation: 'AND',
                LeftNode: {
                    FieldType: 'String',
                    ApiName: 'Context.Name',
                    Operation: 'IsEqual',
                    Values: ['OrderMenu'],
                },
                RightNode: {
                    FieldType: 'DateTime',
                    ApiName: 'CreationDate',
                    Operation: 'IsNotEmpty',
                    Values: [],
                },
            },
            expected: {
                Operation: 'AND',
                LeftNode: {
                    FieldType: 'String',
                    ApiName: 'Type',
                    Operation: 'Contains',
                    Values: ['OrderMenu'],
                },
                RightNode: {
                    FieldType: 'DateTime',
                    ApiName: 'CreationDate',
                    Operation: 'IsNotEmpty',
                    Values: [],
                },
            },
        },
        {
            title: 'One Unsupported (AND)',
            input: {
                Operation: 'AND',
                LeftNode: {
                    FieldType: 'String',
                    ApiName: 'Type',
                    Operation: 'IsEqual',
                    Values: ['Grid'],
                },
                RightNode: {
                    FieldType: 'DateTime',
                    ApiName: 'CreationDate',
                    Operation: 'IsNotEmpty',
                    Values: [],
                },
            },
            expected: {
                FieldType: 'DateTime',
                ApiName: 'CreationDate',
                Operation: 'IsNotEmpty',
                Values: [],
            },
        },
        {
            title: 'One Unsupported (OR)',
            input: {
                Operation: 'OR',
                LeftNode: {
                    FieldType: 'String',
                    ApiName: 'Type',
                    Operation: 'IsEqual',
                    Values: ['Grid'],
                },
                RightNode: {
                    FieldType: 'DateTime',
                    ApiName: 'CreationDate',
                    Operation: 'IsNotEmpty',
                    Values: [],
                },
            },
            expected: undefined,
        },
        {
            title: 'Both Unsupported (AND)',
            input: {
                Operation: 'AND',
                LeftNode: {
                    FieldType: 'String',
                    ApiName: 'Type',
                    Operation: 'IsEqual',
                    Values: ['Grid'],
                },
                RightNode: {
                    FieldType: 'String',
                    ApiName: 'Type',
                    Operation: 'StartWith',
                    Values: ['Gr'],
                },
            },
            expected: undefined,
        },
        {
            title: 'Both Unsupported (OR)',
            input: {
                Operation: 'OR',
                LeftNode: {
                    FieldType: 'String',
                    ApiName: 'Type',
                    Operation: 'IsEqual',
                    Values: ['Grid'],
                },
                RightNode: {
                    FieldType: 'String',
                    ApiName: 'Type',
                    Operation: 'StartWith',
                    Values: ['Gr'],
                },
            },
            expected: undefined,
        },
    ];
    tests.forEach((test) => {
        it(test.title, () => {
            chai_1.expect(transformer.transform(test.input)).to.be.eql(test.expected);
        });
    });
});
describe('Three Levels', () => {
    const tests = [
        {
            title: 'Or till the top - undefined',
            input: {
                Operation: 'OR',
                LeftNode: {
                    Operation: 'AND',
                    LeftNode: {
                        FieldType: 'Bool',
                        ApiName: 'Hidden',
                        Operation: 'IsEqual',
                        Values: [],
                    },
                    RightNode: {
                        FieldType: 'DateTime',
                        ApiName: 'CreationDate',
                        Operation: 'IsNotEmpty',
                        Values: [],
                    },
                },
                RightNode: {
                    Operation: 'OR',
                    LeftNode: {
                        FieldType: 'String',
                        ApiName: 'Type',
                        Operation: 'IsEqual',
                        Values: ['Grid'],
                    },
                    RightNode: {
                        FieldType: 'DateTime',
                        ApiName: 'CreationDate',
                        Operation: 'IsNotEmpty',
                        Values: [],
                    },
                },
            },
            expected: undefined,
        },
        {
            title: 'AND at the top',
            input: {
                Operation: 'AND',
                LeftNode: {
                    Operation: 'AND',
                    LeftNode: {
                        FieldType: 'Bool',
                        ApiName: 'Hidden',
                        Operation: 'IsEqual',
                        Values: [],
                    },
                    RightNode: {
                        FieldType: 'DateTime',
                        ApiName: 'CreationDate',
                        Operation: 'IsNotEmpty',
                        Values: [],
                    },
                },
                RightNode: {
                    Operation: 'OR',
                    LeftNode: {
                        FieldType: 'String',
                        ApiName: 'Type',
                        Operation: 'IsEqual',
                        Values: ['Grid'],
                    },
                    RightNode: {
                        FieldType: 'DateTime',
                        ApiName: 'CreationDate',
                        Operation: 'IsNotEmpty',
                        Values: [],
                    },
                },
            },
            expected: {
                Operation: 'AND',
                LeftNode: {
                    FieldType: 'Bool',
                    ApiName: 'Hidden',
                    Operation: 'IsEqual',
                    Values: [],
                },
                RightNode: {
                    FieldType: 'DateTime',
                    ApiName: 'CreationDate',
                    Operation: 'IsNotEmpty',
                    Values: [],
                },
            },
        },
    ];
    tests.forEach((test) => {
        it(test.title, () => {
            chai_1.expect(transformer.transform(test.input)).to.be.eql(test.expected);
        });
    });
});
