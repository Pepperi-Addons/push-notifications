"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.filter = exports.toKibanaQueryJSON = exports.toKibanaQuery = exports.toApiQueryString = exports.transform = exports.parse = exports.concat = void 0;
const filter_factory_1 = require("./filters/filter-factory");
const filter_1 = __importDefault(require("./filters/filter"));
const sql_where_parser_1 = require("./sql-where-parser");
const json_filter_transformer_1 = require("./json-filter-transformer");
function concat(and, f1, ...args) {
    if (typeof f1 === 'string') {
        const expressions = [f1, args].flat().filter(Boolean);
        if (expressions.length === 0) {
            return '';
        }
        if (expressions.length === 1) {
            return expressions[0];
        }
        return `(${expressions.join(` ${and ? 'AND' : 'OR'} `)})`;
    }
    else if (typeof f1 === 'object') {
        return [f1, args]
            .flat()
            .filter(Boolean)
            .reduce((left, right) => {
            return {
                Operation: and ? 'AND' : 'OR',
                LeftNode: left,
                RightNode: right,
            };
        });
    }
    throw new Error('Invalid parameters');
}
exports.concat = concat;
function parse(where, fields) {
    if (where) {
        const parser = new sql_where_parser_1.SQLWhereParser(fields);
        return parser.parse(where);
    }
    return undefined;
}
exports.parse = parse;
function transform(jsonFilter, transformations) {
    if (jsonFilter) {
        const transformer = new json_filter_transformer_1.JSONFilterTransformer(transformations);
        return transformer.transform(jsonFilter);
    }
    return undefined;
}
exports.transform = transform;
function toApiQueryString(jsonFilter) {
    if (jsonFilter) {
        const filterFactory = new filter_factory_1.FilterFactory();
        const filter = filterFactory.createFilter(jsonFilter);
        return filter.toSQLWhereClause();
    }
    return undefined;
}
exports.toApiQueryString = toApiQueryString;
function toKibanaQuery(jsonFilter) {
    if (jsonFilter) {
        const filterFactory = new filter_factory_1.FilterFactory();
        const filter = filterFactory.createFilter(jsonFilter);
        return filter.toKibanaFilter();
    }
    throw new Error('jsonFilter is a mandatory parameter');
}
exports.toKibanaQuery = toKibanaQuery;
function toKibanaQueryJSON(jsonFilter) {
    if (jsonFilter) {
        const filterFactory = new filter_factory_1.FilterFactory();
        const filter = filterFactory.createFilter(jsonFilter);
        return filter.toKibanaFilter().toJSON();
    }
    throw new Error('jsonFilter is a mandatory parameter');
}
exports.toKibanaQueryJSON = toKibanaQueryJSON;
function filter(objects, jsonFilter) {
    if (jsonFilter) {
        const filterFactory = new filter_factory_1.FilterFactory();
        const filter = filterFactory.createFilter(jsonFilter);
        return filter_1.default.filter(objects, filter);
    }
    return objects;
}
exports.filter = filter;
__exportStar(require("./json-filter"), exports);
