"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterFactory = void 0;
const filter_collection_1 = __importDefault(require("./filter-collection"));
const boolean_filter_1 = require("./boolean-filter");
const string_filter_1 = require("./string-filter");
const number_filter_1 = require("./number-filter");
const guid_filter_1 = require("./guid-filter");
const date_filter_1 = require("./date-filter");
const converters_1 = require("../converters");
class FilterFactory {
    createFilter(jsonFilter) {
        if (jsonFilter.Operation === 'AND' || jsonFilter.Operation === 'OR') {
            const f1 = this.createFilter(jsonFilter.LeftNode);
            const f2 = this.createFilter(jsonFilter.RightNode);
            return new filter_collection_1.default(jsonFilter.Operation === 'AND', [f1, f2]);
        }
        else {
            const apiName = jsonFilter.ApiName;
            const values = jsonFilter.Values;
            const operation = jsonFilter.Operation;
            // todo: we can add validation of the operation & values
            // to see that they match.
            // eg. IsEmpty should not have any values and Between should have 2
            switch (jsonFilter.FieldType) {
                case 'JsonBool':
                case 'Bool': {
                    return new boolean_filter_1.BooleanFilter(apiName, converters_1.str2Bool(values[0]));
                }
                case 'String':
                case 'MultipleStringValues': {
                    return new string_filter_1.StringFilter(apiName, operation, values, false);
                }
                case 'Integer': {
                    return new number_filter_1.NumberFilter(apiName, operation, values.map((x) => +x));
                }
                case 'Double': {
                    return new number_filter_1.NumberFilter(apiName, operation, values.map(parseFloat));
                }
                case 'Date':
                case 'DateTime': {
                    return new date_filter_1.DateFilter(apiName, operation, values);
                }
                case 'Guid': {
                    return new guid_filter_1.GuidFilter(apiName, operation, values[0]);
                }
            }
        }
    }
}
exports.FilterFactory = FilterFactory;
