"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BooleanFilter = void 0;
const filter_1 = __importDefault(require("./filter"));
const converters_1 = require("../converters");
const elastic_builder_1 = __importDefault(require("elastic-builder"));
class BooleanFilter extends filter_1.default {
    constructor(apiName, filterValue) {
        super(apiName);
        this.filterValue = filterValue;
    }
    apply(value) {
        let boolVal;
        // for strings we go with the CPI definition of bool
        if (typeof value === 'string') {
            boolVal = converters_1.str2Bool(value);
        }
        else {
            // for the rest of the types we will go with JS definition of truely values
            boolVal = Boolean(value);
        }
        return boolVal === this.filterValue;
    }
    toSQLWhereClause() {
        return `${this.apiName} = ${this.filterValue ? '1' : '0'}`;
    }
    toKibanaFilter() {
        const value = this.filterValue ? 'true' : 'false';
        return elastic_builder_1.default.termQuery(`${this.apiName}`, value);
    }
}
exports.BooleanFilter = BooleanFilter;
