"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GuidFilter = void 0;
const filter_1 = __importDefault(require("./filter"));
const emptyGuid = '00000000-0000-0000-0000-000000000000';
const elastic_builder_1 = __importDefault(require("elastic-builder"));
class GuidFilter extends filter_1.default {
    constructor(apiName, operation, filterValue) {
        super(apiName);
        this.operation = operation;
        this.filterValue = filterValue;
    }
    apply(value) {
        switch (this.operation) {
            case 'IsEmpty':
                return this.standardize(value) === this.standardize(emptyGuid);
            case 'IsNotEmpty':
                return this.standardize(value) !== this.standardize(emptyGuid);
            case 'IsEqual':
                return this.standardize(value) === this.standardize(this.filterValue);
            case 'IsNotEqual':
                return this.standardize(value) !== this.standardize(this.filterValue);
        }
    }
    standardize(guid) {
        return (typeof guid === 'string' && guid ? guid : emptyGuid).toLowerCase().replace(/-/g, '');
    }
    toSQLWhereClause() {
        const filterVal = (this.filterValue || emptyGuid).toLowerCase();
        switch (this.operation) {
            case 'IsEmpty':
                return `${this.apiName} IS NULL OR ${this.apiName} = '${emptyGuid}'`;
            case 'IsNotEmpty':
                return `${this.apiName} IS NOT NULL AND ${this.apiName} != '${emptyGuid}'`;
            case 'IsEqual':
                return `${this.apiName} = '${filterVal}'`;
            case 'IsNotEqual':
                return `${this.apiName} != '${filterVal}'`;
        }
    }
    toKibanaFilter() {
        const filterVal = (this.filterValue || emptyGuid).toLowerCase();
        const existsFilter = elastic_builder_1.default.existsQuery(`${this.apiName}`);
        const termQueryEmpty = elastic_builder_1.default.termQuery(`${this.apiName}`, emptyGuid);
        const termQueryValue = elastic_builder_1.default.termQuery(`${this.apiName}`, filterVal);
        const res = elastic_builder_1.default.boolQuery();
        switch (this.operation) {
            case 'IsEmpty':
                res.should([elastic_builder_1.default.boolQuery().mustNot(existsFilter), elastic_builder_1.default.boolQuery().must(termQueryEmpty)]);
                break;
            case 'IsNotEmpty':
                res.mustNot(termQueryEmpty).must(existsFilter);
                break;
            case 'IsEqual':
                res.must(termQueryValue);
                break;
            case 'IsNotEqual':
                res.mustNot(termQueryValue);
                break;
        }
        return res;
    }
}
exports.GuidFilter = GuidFilter;
