"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const elastic_builder_1 = __importDefault(require("elastic-builder"));
const filter_1 = __importDefault(require("./filter"));
class FilterCollection extends filter_1.default {
    constructor(useAndOperation = true, filters = []) {
        super('');
        this.useAndOperation = useAndOperation;
        this.filters = filters;
    }
    addFilter(filter) {
        this.filters.push(filter);
    }
    apply() {
        throw new Error('Not implemented');
    }
    filter(object) {
        let res = true;
        for (const filter of this.filters) {
            res = filter.filter(object);
            if (res != this.useAndOperation) {
                break;
            }
        }
        return res;
    }
    toSQLWhereClause() {
        let res = '';
        this.filters.forEach((filter) => {
            const innerClause = filter.toSQLWhereClause();
            if (innerClause) {
                // if it is not the first filter add the operation
                if (res) {
                    res += ` ${this.useAndOperation ? 'AND' : 'OR'} `;
                }
                res += `(${innerClause})`;
            }
        });
        return res;
    }
    toKibanaFilter() {
        const boolQuery = elastic_builder_1.default.boolQuery();
        const query = [];
        this.filters.forEach((filter) => {
            const innerClause = filter.toKibanaFilter();
            if (innerClause) {
                query.push(innerClause);
            }
        });
        if (this.useAndOperation) {
            boolQuery.must(query);
        }
        else {
            boolQuery.should(query);
        }
        return boolQuery;
    }
}
exports.default = FilterCollection;
