"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JSONFilterTransformer = void 0;
class JSONFilterTransformer {
    constructor(transformers) {
        this.transformers = transformers;
    }
    transform(filter) {
        // create a deep copy of the JSON filter
        let res = JSON.parse(JSON.stringify(filter));
        // transform recursivly
        res = this.transformNode(res);
        // pass through the result to cleanup null nodes
        res = this.cleanNode(res);
        return res;
    }
    transformNode(node) {
        if (node.Operation === 'AND' || node.Operation === 'OR') {
            node.LeftNode = this.transformNode(node.LeftNode);
            node.RightNode = this.transformNode(node.RightNode);
            return node;
        }
        else {
            return this.transformExpression(node);
        }
    }
    transformExpression(expression) {
        const transformer = this.transformers[expression.ApiName];
        let keep = false;
        // no transformer specified
        if (transformer === undefined) {
            keep = true;
        }
        // false specified
        if (transformer === false) {
            keep = false;
        }
        // transformer specified
        if (typeof transformer === 'function') {
            const transformed = transformer(expression);
            keep = transformed !== false;
        }
        return keep ? expression : undefined;
    }
    cleanNode(node) {
        if (!node) {
            return undefined;
        }
        if (node.Operation === 'AND' || node.Operation === 'OR') {
            node.LeftNode = this.cleanNode(node.LeftNode);
            node.RightNode = this.cleanNode(node.RightNode);
            // no nodes to clean
            if (node.LeftNode && node.RightNode) {
                return node;
            }
            // if one of the nodes is null and the operation is OR we need to clean both nodes
            // because we want the result to be a stronger filter that the request
            if (!node.LeftNode) {
                return node.Operation === 'AND' ? node.RightNode : undefined;
            }
            if (!node.RightNode) {
                return node.Operation === 'AND' ? node.LeftNode : undefined;
            }
        }
        else {
            return node;
        }
    }
}
exports.JSONFilterTransformer = JSONFilterTransformer;
