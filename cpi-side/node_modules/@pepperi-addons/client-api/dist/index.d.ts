import { JSONFilter } from '@pepperi-addons/pepperi-filters';
declare type TransactionIdentifier = {
    UUID: string;
} | {
    InternalID: number;
};
declare type ItemIdentifier = {
    UUID: string;
} | {
    InternalID: number;
} | {
    ExternalID: string;
};
declare type ObjectIdentifier = {
    UUID: string;
} | {
    InternalID: number;
};
declare type TypeIdentifier = {
    Name: string;
} | {
    InternalID: number;
};
declare type CatalogIdentifier = {
    Name: string;
} | {
    InternalID: number;
} | {
    UUID: string;
};
export interface SearchParams<T extends string> {
    fields: T[];
    page?: number;
    pageSize?: number;
    filter?: JSONFilter;
    sorting?: {
        Field: string;
        Ascending: boolean;
    }[];
}
export interface SearchResult<T extends string> {
    objects: {
        [K in T]: any;
    }[];
    count: number;
    page: number;
}
export interface TransactionLinesSearchParams<T extends string> extends SearchParams<T> {
    transactionFilter?: JSONFilter;
}
export interface OrderCenterSearchParams<T extends string> extends SearchParams<T> {
    transaction: TransactionIdentifier;
}
export interface UpdateParams {
    objects: {
        UUID: string;
        [key: string]: any;
    }[];
    save?: boolean;
}
export interface UpdateStatus {
    id: string;
    status: 'updated' | 'failed' | 'added' | 'deleted';
    message: string;
}
export interface UpdateResult {
    result: UpdateStatus[];
}
export interface OrderCenterUpdateParams {
    transaction: TransactionIdentifier;
    objects: {
        item: ItemIdentifier;
        [key: string]: any;
    }[];
    save?: boolean;
}
export interface UDTGetParams {
    table: string;
    mainKey: string;
    secondaryKey: string;
    index?: number;
}
export interface UDTGetResult {
    value: string;
}
export interface UDTGetListParams {
    table: string;
    mainKey?: string;
    secondaryKey?: string;
}
export interface UDTGetListResult {
    objects: {
        mainKey: string;
        secondaryKey: string;
        value: string;
    }[];
}
export interface ADALGetParams {
    addon: string;
    table: string;
    key: string;
}
export interface ADALGetResult {
    object: {
        Key: string;
        [key: string]: any;
    };
}
export interface ADALGetListParams {
    addon: string;
    table: string;
}
export interface ADALGetListResult {
    objects: {
        Key: string;
        [key: string]: any;
    }[];
}
export interface UDTUpsertParams {
    table: string;
    mainKey: string;
    secondaryKey: string;
    index?: number;
    value: string;
}
export interface GetParams<T extends string> {
    fields: T[];
    key: ObjectIdentifier;
}
export interface GetResult<T extends string> {
    object: {
        [K in T]: any;
    };
}
export interface OrderCenterGetParams<T extends string> {
    transaction: TransactionIdentifier;
    item: ItemIdentifier;
    fields: T[];
}
export interface OrderCenterGetResult<T extends string> {
    object: {
        [K in T]: any;
    };
}
export interface CreateAccountParams {
    type?: TypeIdentifier;
    object?: {
        [key: string]: any;
    };
}
export interface CreateContactParams {
    type?: TypeIdentifier;
    references: {
        account: ObjectIdentifier;
    };
    object?: {
        [key: string]: any;
    };
}
export interface CreateActivityParams {
    type: TypeIdentifier;
    references: {
        account: ObjectIdentifier;
    };
    object?: {
        [key: string]: any;
    };
}
export interface CreateTransactionParams {
    type: TypeIdentifier;
    references: {
        account: ObjectIdentifier;
        catalog?: CatalogIdentifier;
        originAccount?: ObjectIdentifier;
    };
    object?: {
        [key: string]: any;
    };
}
export interface CreateResult extends UpdateStatus {
}
export interface AddTransactionLinesParams {
    transaction: TransactionIdentifier;
    lines: {
        item: ItemIdentifier;
        leadingLine?: ObjectIdentifier;
        lineData: {
            [key: string]: any;
        };
    }[];
}
export interface RemoveTransactionLinesParams {
    transaction: TransactionIdentifier;
    lines: ObjectIdentifier[];
}
declare type Bridge = (params: any) => Promise<any>;
export default function Factory(bridge: Bridge): {
    api: {
        transactions: {
            get: <T extends string>(params: GetParams<T>) => Promise<GetResult<T>>;
            update: (params: UpdateParams) => Promise<UpdateResult>;
            search: <T_1 extends string>(params: SearchParams<T_1>) => Promise<SearchResult<T_1>>;
            addLines: (params: AddTransactionLinesParams) => Promise<UpdateResult>;
            removeLines: (params: RemoveTransactionLinesParams) => Promise<UpdateResult>;
        };
        activities: {
            get: <T extends string>(params: GetParams<T>) => Promise<GetResult<T>>;
            update: (params: UpdateParams) => Promise<UpdateResult>;
            search: <T_1 extends string>(params: SearchParams<T_1>) => Promise<SearchResult<T_1>>;
        };
        accounts: {
            get: <T extends string>(params: GetParams<T>) => Promise<GetResult<T>>;
            update: (params: UpdateParams) => Promise<UpdateResult>;
            search: <T_1 extends string>(params: SearchParams<T_1>) => Promise<SearchResult<T_1>>;
        };
        transactionLines: {
            get: <T extends string>(params: GetParams<T>) => Promise<GetResult<T>>;
            update: (params: UpdateParams) => Promise<UpdateResult>;
            search: <T_2 extends string>(params: TransactionLinesSearchParams<T_2>) => Promise<SearchResult<T_2>>;
        };
        users: {
            get: <T extends string>(params: GetParams<T>) => Promise<GetResult<T>>;
            search: <T_1 extends string>(params: SearchParams<T_1>) => Promise<SearchResult<T_1>>;
        };
        contacts: {
            get: <T extends string>(params: GetParams<T>) => Promise<GetResult<T>>;
            update: (params: UpdateParams) => Promise<UpdateResult>;
            search: <T_1 extends string>(params: SearchParams<T_1>) => Promise<SearchResult<T_1>>;
        };
        items: {
            get: <T extends string>(params: GetParams<T>) => Promise<GetResult<T>>;
            search: <T_1 extends string>(params: SearchParams<T_1>) => Promise<SearchResult<T_1>>;
        };
        catalogs: {
            get: <T extends string>(params: GetParams<T>) => Promise<GetResult<T>>;
            search: <T_1 extends string>(params: SearchParams<T_1>) => Promise<SearchResult<T_1>>;
        };
        allActivities: {
            search: <T_1 extends string>(params: SearchParams<T_1>) => Promise<SearchResult<T_1>>;
        };
        attachments: {
            get: <T extends string>(params: GetParams<T>) => Promise<GetResult<T>>;
            search: <T_1 extends string>(params: SearchParams<T_1>) => Promise<SearchResult<T_1>>;
        };
        userDefinedTables: {
            get: (params: UDTGetParams) => Promise<UDTGetResult>;
            upsert: (params: UDTUpsertParams) => Promise<UpdateResult>;
            getList: (params: UDTGetListParams) => Promise<UDTGetListResult>;
        };
        transactionScopeItems: {
            get: <T extends string>(params: GetParams<T>) => Promise<GetResult<T>>;
            search: <T_3 extends string>(params: OrderCenterSearchParams<T_3>) => Promise<SearchResult<T_3>>;
            update: (params: UpdateParams) => Promise<UpdateResult>;
        };
        adal: {
            get: (params: ADALGetParams) => Promise<ADALGetResult>;
            getList: (params: ADALGetListParams) => Promise<ADALGetListResult>;
        };
    };
    app: {
        transactions: {
            update: (params: UpdateParams) => Promise<UpdateResult>;
            add: (params: CreateTransactionParams) => Promise<CreateResult>;
            addLines: (params: AddTransactionLinesParams) => Promise<UpdateResult>;
            removeLines: (params: RemoveTransactionLinesParams) => Promise<UpdateResult>;
        };
        activities: {
            update: (params: UpdateParams) => Promise<UpdateResult>;
            add: (params: CreateActivityParams) => Promise<CreateResult>;
        };
        accounts: {
            update: (params: UpdateParams) => Promise<UpdateResult>;
            add: (params: CreateAccountParams) => Promise<CreateResult>;
        };
        transactionLines: {
            update: (params: UpdateParams) => Promise<UpdateResult>;
        };
        contacts: {
            update: (params: UpdateParams) => Promise<UpdateResult>;
            add: (params: CreateContactParams) => Promise<CreateResult>;
        };
        transactionScopeItems: {
            update: (params: UpdateParams) => Promise<UpdateResult>;
        };
    };
};
export {};
