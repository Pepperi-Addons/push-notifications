"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
;
;
function Factory(bridge) {
    function bridgeToCPI(func, params) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params['function'] = func;
                        return [4 /*yield*/, bridge(params)];
                    case 1:
                        res = _a.sent();
                        if (typeof res !== 'object' || typeof res.success !== 'boolean') {
                            throw new Error("Bridge function returned invalid response: " + res);
                        }
                        if (!res.success) {
                            throw new Error("Client API Error. Code: " + res.code + ", Messsage: " + res.message);
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    }
    function searchFunction(key) {
        return function (params) {
            return bridgeToCPI(key, params);
        };
    }
    function getFunction(key) {
        return function (params) {
            return bridgeToCPI(key, params);
        };
    }
    function updateFunction(key) {
        return function (params) {
            return bridgeToCPI(key, params);
        };
    }
    var clientApi = {
        api: {
            transactions: {
                get: getFunction('pepperi.api.transactions.get'),
                update: updateFunction('pepperi.api.transactions.update'),
                search: searchFunction('pepperi.api.transactions.search'),
                addLines: function (params) {
                    return bridgeToCPI('pepperi.api.transactions.addLines', params);
                },
                removeLines: function (params) {
                    return bridgeToCPI('pepperi.api.transactions.removeLines', params);
                }
            },
            activities: {
                get: getFunction('pepperi.api.activities.get'),
                update: updateFunction('pepperi.api.activities.update'),
                search: searchFunction('pepperi.api.activities.search'),
            },
            accounts: {
                get: getFunction('pepperi.api.accounts.get'),
                update: updateFunction('pepperi.api.accounts.update'),
                search: searchFunction('pepperi.api.accounts.search'),
            },
            transactionLines: {
                get: getFunction('pepperi.api.transactionLines.get'),
                update: updateFunction('pepperi.api.transactionLines.update'),
                search: function (params) {
                    return bridgeToCPI('pepperi.api.transactionLines.search', params);
                }
            },
            users: {
                get: getFunction('pepperi.api.users.get'),
                search: searchFunction('pepperi.api.users.search'),
            },
            contacts: {
                get: getFunction('pepperi.api.contacts.get'),
                update: updateFunction('pepperi.api.contacts.update'),
                search: searchFunction('pepperi.api.contacts.search'),
            },
            items: {
                get: getFunction('pepperi.api.items.get'),
                search: searchFunction('pepperi.api.items.search'),
            },
            catalogs: {
                get: getFunction('pepperi.api.catalogs.get'),
                search: searchFunction('pepperi.api.catalogs.search'),
            },
            allActivities: {
                search: searchFunction('pepperi.api.allActivities.search'),
            },
            attachments: {
                get: getFunction('pepperi.api.attachments.get'),
                search: searchFunction('pepperi.api.attachments.search'),
            },
            userDefinedTables: {
                get: function (params) {
                    return bridgeToCPI('pepperi.api.userDefinedTables.get', params);
                },
                upsert: function (params) {
                    return bridgeToCPI('pepperi.api.userDefinedTables.upsert', params);
                },
                getList: function (params) {
                    return bridgeToCPI('pepperi.api.userDefinedTables.getList', params);
                }
            },
            transactionScopeItems: {
                get: getFunction('pepperi.api.transactionScopeItems.get'),
                search: function (params) {
                    return bridgeToCPI('pepperi.api.transactionScopeItems.search', params);
                },
                update: updateFunction('pepperi.api.transactionScopeItems.update'),
            },
            adal: {
                get: function (params) {
                    return bridgeToCPI('pepperi.api.adal.get', params);
                },
                getList: function (params) {
                    return bridgeToCPI('pepperi.api.adal.getList', params);
                }
            },
        },
        app: {
            transactions: {
                update: updateFunction('pepperi.app.transactions.update'),
                add: function (params) {
                    return bridgeToCPI('pepperi.app.transactions.add', params);
                },
                addLines: function (params) {
                    return bridgeToCPI('pepperi.app.transactions.addLines', params);
                },
                removeLines: function (params) {
                    return bridgeToCPI('pepperi.app.transactions.removeLines', params);
                }
            },
            activities: {
                update: updateFunction('pepperi.app.activities.update'),
                add: function (params) {
                    return bridgeToCPI('pepperi.app.activities.add', params);
                }
            },
            accounts: {
                update: updateFunction('pepperi.app.accounts.update'),
                add: function (params) {
                    return bridgeToCPI('pepperi.app.accounts.add', params);
                }
            },
            transactionLines: {
                update: updateFunction('pepperi.app.transactionLines.update'),
            },
            contacts: {
                update: updateFunction('pepperi.app.contacts.update'),
                add: function (params) {
                    return bridgeToCPI('pepperi.app.contacts.add', params);
                }
            },
            transactionScopeItems: {
                update: updateFunction('pepperi.app.transactionScopeItems.update'),
            }
        }
    };
    return clientApi;
}
exports.default = Factory;
