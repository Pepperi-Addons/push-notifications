"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataViewConverter = void 0;
const entities_1 = require("@pepperi-addons/papi-sdk/dist/entities");
const ui_control_configuration_service_1 = require("./ui-control-configuration.service");
class DataViewConverter {
    static toDataView(uiControlData) {
        const dataView = DataViewConverter.createDataView(uiControlData);
        return dataView;
    }
    static createDataView(uiControl) {
        const configuration = ui_control_configuration_service_1.UIControlConfigurationsService.configuration(uiControl);
        const dataView = {
            InternalID: uiControl.ObjectID,
            Type: configuration.Type,
            Title: uiControl.DisplayName || '',
            Hidden: uiControl.Hidden,
            CreationDateTime: uiControl.CreationDate,
            ModificationDateTime: uiControl.ModificationDate,
            Context: DataViewConverter.toDataViewContext(uiControl.Type, uiControl.PermissionRoleID),
            ListData: undefined,
            Fields: []
        };
        if (configuration.ListData) {
            dataView.ListData = {
                Sort: uiControl.SortBy ? [{ FieldID: uiControl.SortBy, Ascending: uiControl.SortAsc }] : undefined,
                Section: uiControl.GroupBy && uiControl.GroupBy !== '-1' ? { FieldID: uiControl.GroupBy, Ascending: true } : undefined
            };
        }
        switch (dataView.Type) {
            case "Grid": {
                DataViewConverter.populateGridDataView(dataView, uiControl);
                break;
            }
            case "Menu": {
                DataViewConverter.populateMenuDataView(dataView, uiControl);
                break;
            }
            case "Configuration": {
                DataViewConverter.populateConfigurationDataView(dataView, uiControl);
                break;
            }
            default: {
                DataViewConverter.populateBaseFormDataView(dataView, uiControl);
                break;
            }
        }
        return dataView;
    }
    static populateGridDataView(dataView, uiControl) {
        var _a, _b;
        dataView.Fields = uiControl.ControlFields.map(DataViewConverter.createGridDataViewField);
        dataView.Columns = uiControl.ControlFields.map(field => { return { Width: field.ColumnWidth || 10 }; });
        dataView.FrozenColumnsCount = ((_a = uiControl.Layout) === null || _a === void 0 ? void 0 : _a.frozenColumnsCount) || 0;
        dataView.MinimumColumnWidth = ((_b = uiControl.Layout) === null || _b === void 0 ? void 0 : _b.MinimumWidth) || 0;
    }
    static createGridDataViewField(uiControlField) {
        var _a, _b;
        return {
            FieldID: uiControlField.ApiName,
            Type: DataViewConverter.convertFromEnum(entities_1.DataViewFieldTypes, uiControlField.FieldType, 'None'),
            Title: uiControlField.Title || '',
            Mandatory: uiControlField.MandatoryField,
            ReadOnly: uiControlField.ReadOnlyField,
            Layout: {
                Origin: {
                    X: uiControlField.Layout ? uiControlField.Layout.X : 0,
                    Y: uiControlField.Layout ? uiControlField.Layout.Y : 0,
                }
            },
            Style: {
                Alignment: {
                    Vertical: DataViewConverter.convertFromEnum(entities_1.VerticalAlignments, ((_a = uiControlField.Layout) === null || _a === void 0 ? void 0 : _a.yAlignment) || 0, 'Stretch'),
                    Horizontal: DataViewConverter.convertFromEnum(entities_1.HorizontalAlignments, ((_b = uiControlField.Layout) === null || _b === void 0 ? void 0 : _b.xAlignment) || 0, 'Stretch')
                }
            }
        };
    }
    static populateBaseFormDataView(dataView, uiControl) {
        var _a, _b;
        dataView.Fields = uiControl.ControlFields.map(DataViewConverter.createBaseFormDataViewField);
        dataView.Rows = ((_b = (_a = uiControl.Layout) === null || _a === void 0 ? void 0 : _a.rowDefinitions) === null || _b === void 0 ? void 0 : _b.map(row => {
            return { Mode: DataViewConverter.convertFromEnum(entities_1.DataViewRowModes, row.mode, 'Fixed') };
        })) || [];
        dataView.Columns = new Array(uiControl.Columns).fill({});
    }
    static createBaseFormDataViewField(uiControlField) {
        var _a, _b, _c, _d, _e, _f;
        return {
            FieldID: uiControlField.ApiName,
            Type: DataViewConverter.convertFromEnum(entities_1.DataViewFieldTypes, uiControlField.FieldType, 'None'),
            Title: uiControlField.Title || '',
            Mandatory: uiControlField.MandatoryField,
            ReadOnly: uiControlField.ReadOnlyField,
            Layout: {
                Origin: {
                    X: ((_a = uiControlField.Layout) === null || _a === void 0 ? void 0 : _a.X) || 0,
                    Y: ((_b = uiControlField.Layout) === null || _b === void 0 ? void 0 : _b.Y) || 0,
                },
                Size: {
                    Width: ((_c = uiControlField.Layout) === null || _c === void 0 ? void 0 : _c.Width) || 0,
                    Height: ((_d = uiControlField.Layout) === null || _d === void 0 ? void 0 : _d.Field_Height) || 0,
                }
            },
            Style: {
                Alignment: {
                    Vertical: DataViewConverter.convertFromEnum(entities_1.VerticalAlignments, ((_e = uiControlField.Layout) === null || _e === void 0 ? void 0 : _e.yAlignment) || 0, 'Stretch'),
                    Horizontal: DataViewConverter.convertFromEnum(entities_1.HorizontalAlignments, ((_f = uiControlField.Layout) === null || _f === void 0 ? void 0 : _f.xAlignment) || 0, 'Stretch')
                }
            }
        };
    }
    static populateMenuDataView(dataView, uiControl) {
        dataView.Fields = uiControl.ControlFields.map(DataViewConverter.createMenuDataViewField);
    }
    static createMenuDataViewField(uiControlField) {
        return {
            FieldID: uiControlField.ApiName,
            Title: uiControlField.Title || ''
        };
    }
    static populateConfigurationDataView(dataView, uiControl) {
        dataView.Fields = uiControl.ControlFields.map(DataViewConverter.createConfigurationDataViewField);
    }
    static createConfigurationDataViewField(uiControlField) {
        return {
            FieldID: uiControlField.ApiName,
            Type: DataViewConverter.convertFromEnum(entities_1.DataViewFieldTypes, uiControlField.FieldType, 'None'),
            Title: uiControlField.Title || '',
            Mandatory: uiControlField.MandatoryField,
            ReadOnly: uiControlField.ReadOnlyField,
        };
    }
    static toUIControlData(dataView) {
        var _a, _b, _c;
        const res = {
            ObjectID: dataView.InternalID,
            Hidden: dataView.Hidden || false,
            Type: DataViewConverter.toType(dataView.Context),
            CreationDate: dataView.CreationDateTime || '',
            ModificationDate: dataView.ModificationDateTime || '',
            ControlFields: dataView.Fields.map((field, i) => {
                var _a, _b, _c, _d, _e, _f;
                const res = {
                    ParentField: "",
                    Title: field.Title || '',
                    WrntyFieldName: field.Title || '',
                    MandatoryField: field.Mandatory || false,
                    ReadOnlyField: 'ReadOnly' in field ? field.ReadOnly : true,
                    FieldConditions: null,
                    CustomField: false,
                    ApiName: field.FieldID,
                    FieldType: 'Type' in field ? entities_1.DataViewFieldTypes[field.Type] : entities_1.DataViewFieldTypes.TextBox,
                    OptionalValues: undefined,
                    MinValue: -1000000000,
                    MaxValue: 1000000000,
                    MaxCharacters: 0,
                    MaxLines: 0,
                    Layout: {
                        X: ((_a = field.Layout) === null || _a === void 0 ? void 0 : _a.Origin) ? field.Layout.Origin.X : 0,
                        Y: ((_b = field.Layout) === null || _b === void 0 ? void 0 : _b.Origin) ? field.Layout.Origin.Y : 0,
                        Width: ((_c = field.Layout) === null || _c === void 0 ? void 0 : _c.Size) ? field.Layout.Size.Width : 1,
                        Field_Height: ((_d = field.Layout) === null || _d === void 0 ? void 0 : _d.Size) ? field.Layout.Size.Height : 1,
                        Line_Number: i,
                        xAlignment: (((_e = field.Style) === null || _e === void 0 ? void 0 : _e.Alignment) ? entities_1.HorizontalAlignments[field.Style.Alignment.Horizontal] : entities_1.HorizontalAlignments.Stretch),
                        yAlignment: (((_f = field.Style) === null || _f === void 0 ? void 0 : _f.Alignment) ? entities_1.VerticalAlignments[field.Style.Alignment.Vertical] : entities_1.VerticalAlignments.Center)
                    },
                    ColumnWidth: 10,
                    ObjectTypeReference: 0,
                    DefaultValue: '',
                    Hidden: false
                };
                return res;
            }),
            ControlConditions: [],
            Family: '',
            Name: '',
            DisplayName: dataView.Title || '',
            HighlightFirst: false,
            Columns: dataView.Columns ? dataView.Columns.length : 1,
            SortBy: ((_a = dataView.ListData) === null || _a === void 0 ? void 0 : _a.Sort) && dataView.ListData.Sort.length ? dataView.ListData.Sort[0].FieldID : '',
            SortAsc: ((_b = dataView.ListData) === null || _b === void 0 ? void 0 : _b.Sort) && dataView.ListData.Sort.length ? dataView.ListData.Sort[0].Ascending : false,
            DefaultView: '',
            GroupBy: ((_c = dataView.ListData) === null || _c === void 0 ? void 0 : _c.Section) ? dataView.ListData.Section.FieldID : '',
            Flat: true,
            ActivityTypesID: null,
            Statuses: null,
            ControlName: null,
            ViewType: DataViewConverter.toUIControlType(dataView.Type),
            PermissionRoleID: dataView.Context.Profile.InternalID || 0,
            PermissionRoleName: dataView.Context.Profile.Name || '',
            Version: 1,
            Layout: {
                columnDefinitions: [],
                rowDefinitions: 'Rows' in dataView ? dataView.Rows.map(row => { return { mode: entities_1.DataViewRowModes[row.Mode] }; }) : [],
                frozenColumnsCount: 0,
                Width: 0,
                MinimumWidth: 0,
                WidthType: 0 // not supported
            },
            RowsAs: null,
            ColumnsAs: null,
            ColumnsOrderBy: null,
            RowsOrderBy: null // not in use
        };
        if (dataView.Type === 'Grid') {
            const grid = dataView;
            res.Layout.MinimumWidth = grid.MinimumColumnWidth;
            res.Layout.frozenColumnsCount = grid.FrozenColumnsCount;
            // DI-18161
            // For Grid UIControls the 'Columns' fields allways needs to be 1 
            // B/C this is how the application logic knows to calculate the columns count
            // And if we will set the real count, then when the UIControl is edited in the BO 
            // 'Columns' will hold an incorrect number that isn't 1 and this will break the clients
            res.Columns = 1;
            dataView.Fields.forEach((field, i) => {
                res.ControlFields[i].ColumnWidth = grid.Columns[i].Width;
                res.ControlFields[i].Layout.Width = 1;
                res.ControlFields[i].Layout.Field_Height = 1;
            });
        }
        return res;
    }
    static convertFromEnum(e, num, defaultVal) {
        return (Object.keys(e).find(key => e[key] == num) || defaultVal);
    }
    static toDataViewType(num) {
        const type = Object.keys(entities_1.UIControlViewTypes).find(key => entities_1.UIControlViewTypes[key] === num);
        switch (type) {
            case 'None':
                return 'Form';
            case 'Grid':
            case 'Line':
            case 'CardsGrid':
            case 'Map':
            case 'Menu':
            case 'Configuration':
                return type;
            case 'Cards':
                return 'Card';
            case 'Detailed':
                return 'Details';
        }
    }
    static toUIControlType(type) {
        const res = entities_1.UIControlViewTypes.None;
        switch (type) {
            case 'Grid':
            case 'Line':
            case 'CardsGrid':
            case 'Map':
                return entities_1.UIControlViewTypes[type];
            case 'Card':
                return entities_1.UIControlViewTypes.Cards;
            case 'Details':
                return entities_1.UIControlViewTypes.Detailed;
            case 'Menu':
                return entities_1.UIControlViewTypes.Menu;
            case 'Configuration':
                return entities_1.UIControlViewTypes.Configuration;
        }
        return res;
    }
    static toResource(prefix) {
        switch (prefix) {
            case 'AT':
                return 'accounts';
            case 'GA':
                return 'activities';
            case 'CP':
                return 'contacts';
            case 'OA':
                return 'transactions';
            case 'GL':
                return 'lists';
            case 'CA':
                return 'catalogs';
        }
    }
    static toResourcePrefix(resource) {
        switch (resource) {
            case 'accounts':
                return 'AT';
            case 'contacts':
                return 'CP';
            case 'activities':
                return 'GA';
            case 'transactions':
                return 'OA';
            case 'lists':
                return 'GL';
            case 'catalogs':
                return 'CA';
        }
    }
    static toDataViewContext(type, permissionRoleID) {
        let objectReference = undefined;
        let name = type;
        // [GA#12345]ActivityForm
        let matches = type.match(/^\[(\w\w)#(\d+)\](\w+)$/);
        if (matches && matches.length == 4 && entities_1.ResoursePrefixes.includes(matches[1])) {
            objectReference = {
                InternalID: parseInt(matches[2]),
                Resource: DataViewConverter.toResource(matches[1])
            };
            name = matches[3];
        }
        else {
            // [GL#7c867608-e25c-4be0-aa99-10db80e78b47]ListView
            matches = type.match(/^\[GL#((\w|-)+)\](\w+)$/);
            if (matches && matches.length == 4) {
                objectReference = {
                    UUID: matches[1],
                    Resource: DataViewConverter.toResource('GL')
                };
                name = matches[3];
            }
        }
        // ScreenSize
        let screenSize = 'Tablet';
        matches = name.match(/^(\w+)(Landscape|Phablet)$/);
        if (matches && matches.length == 3) {
            screenSize = matches[2];
            name = matches[1];
        }
        return {
            Object: objectReference,
            Name: name,
            ScreenSize: screenSize,
            Profile: {
                InternalID: permissionRoleID
            }
        };
    }
    static toType(context) {
        let res = context.Name;
        // add screen size suffix
        if (context.ScreenSize !== 'Tablet') {
            res += context.ScreenSize;
        }
        if (context.Object) {
            // [GL#0b089829-4902-482a-98ce-2d396df48a1b]
            if (context.Object.Resource === 'lists') {
                res = `[GL#${context.Object.UUID}]${res}`;
            }
            else {
                res = `[${DataViewConverter.toResourcePrefix(context.Object.Resource)}#${context.Object.InternalID}]${res}`;
            }
        }
        return res;
    }
}
exports.DataViewConverter = DataViewConverter;
