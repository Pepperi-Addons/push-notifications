import { DataObject, UIObject, UIPage } from '../app/entities';
/**
 * The object passed to an event's {@link Interceptor | Interceptors}
 */
export interface EventData {
    /**
     * The {@link UIObject} of this event
     */
    UIObject?: UIObject;
    /**
     * The {@link DataObject} of this event
     * (eg. The {@link TransactionLine} in SetFieldValue event in the Order Center)
     */
    DataObject?: DataObject;
    /**
     * The {@link UIPage} of this event
     */
    UIPage?: UIPage;
    /**
     * The {@link FieldID} of this event
     * (eg. The FieldID of the field in a SetFieldValue event)
     */
    FieldID?: string;
    [key: string]: any;
}
/**
 * The main function definintion for interceptors
 */
export declare type MainFunction = ((data: EventData) => Promise<void>) | undefined | null;
/**
 * The Interceptor function used to subscribe to events
 *
 * @param data data about the current invocation of the event
 * @param next a middleware allowing the passing of control to the next interceptors
 * @param main the main function implementation passed from previous interceptors
 *
 * @usage
 * Example #1:
 *
 * Performing an action before the main action
 *
 * In this case only the `data` parameter needs to be sent
 *
 * ```typescript
 * const interceptor: Interceptor = (data) => {
 *      // perform you custom logic here
 * }
 * ```
 *
 * @usage
 * Example #2:
 *
 * Performing an action after the main action
 *
 * ```typescript
 * const interceptor: Interceptor = (data, next, main) => {
 *      // first allow other interceptors & the main action to run
 *      await next(main);
 *
 *      // perform you custom logic here
 * }
 * ```
 *
 * @usage
 * Example #3:
 *
 * Implementing the main action
 *
 * ```typescript
 * const interceptor: Interceptor = (data, next, main) => {
 *      // first allow other interceptors & the main action to run
 *      await next(async () => {
 *          // implement the main logic here
 *      });
 * }
 * ```
 */
export interface Interceptor {
    (data: EventData, next: (main: MainFunction) => Promise<void>, main: MainFunction): Promise<void>;
}
