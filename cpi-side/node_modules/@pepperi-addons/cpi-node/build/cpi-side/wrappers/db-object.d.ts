import { ResourceType } from '@pepperi-addons/papi-sdk/dist/entities';
import { BLLOrderCenter } from './bll-order-center';
export declare const CPIDBObjectTypes: {
    CPIDBObject: number;
    CPIEmployee: number;
    CPITypeSafeAttributeConfig: number;
    CPIActivity: number;
    CPIAssignment: number;
    CPIChangedObject: number;
    CPIBrand: number;
    CPICampaign: number;
    CPIPIColor: number;
    CPIPISize: number;
    CPIBoxItem: number;
    CPIBox: number;
    CPIUnitOfMeasureItem: number;
    CPIUnitOfMeasure: number;
    CPIPortfolioItem: number;
    CPIPriceListPortfolioItem: number;
    CPIPriceList: number;
    CPIContactPerson: number;
    CPIStore: number;
    CPIStorePortfolio: number;
    CPIAgent: number;
    CPIFilter: number;
    CPICatalog: number;
    CPICountry: number;
    CPIMessage: number;
    CPIState: number;
    CPISubTarget: number;
    CPITarget: number;
    CPIStorePropertyColor: number;
    CPIPortfolioItemGroup: number;
    CPIStockTakingPortfolioItem: number;
    CPIStockTaking: number;
    CPIStoreStock: number;
    CPIStoreCatalogPriceList: number;
    CPIOrderItem: number;
    CPIOrder: number;
    CPISale: number;
    CPIPayment: number;
    CPIOnlineAction: number;
    CPIActivityTypeDefinition: number;
    CPIGeneralActivity: number;
    CPICustomizedTargetItem: number;
    CPICustomizedTarget: number;
    CPITask: number;
    CPICustomizationFile: number;
    CPIAttachment: number;
    CPIPortfolioItemInventory: number;
    CPIGroupItem: number;
    CPIMapData: number;
    CPIMapDataMetaData: number;
    CPIUIViewer: number;
    CPILog: number;
    CPIJsonFilter: number;
    CPILastDBType: number;
};
export declare type CPIDBObjectType = keyof typeof CPIDBObjectTypes;
export interface ApiTypeAndValue {
    value: string;
    dataType: number;
    uiType: number;
    isTSA: boolean;
}
export interface Status {
    successful: boolean;
    errorCode: number;
    errorMessage: string;
    extraInfo: string;
}
export interface Transition {
    UUID: string;
    Title: string;
}
export interface CPIDBObject {
    wrntyID: number;
    dbID: number;
    uuid: string;
    hidden: boolean;
    dbObjectType: number;
    activityTypeDefinition: CPIActivityTypeDefinition;
    getValueByApiName(apiName: string): Promise<ApiTypeAndValue>;
    setValueByApiName(apiName: string, value: string, doCalculations: boolean): Promise<Status>;
    availableTransitions(): Promise<Transition[]>;
    inTransition(): Promise<boolean>;
}
export interface CPIActivityTypeDefinition extends CPIDBObject {
    name: string;
    activityType: number;
}
export interface CPIStore extends CPIDBObject {
    name: string;
    contactPersons: CPIContactPerson[];
    parentStore: CPIStore | undefined;
}
export interface CPIContactPerson extends CPIDBObject {
    parentStore: CPIStore;
}
export interface CPIActivity extends CPIDBObject {
    externalID: string;
    actionDateTime: number;
    status: number;
    store: CPIStore;
    contactPerson: CPIContactPerson;
    originStore: CPIStore | undefined;
    additionalStore: CPIStore | undefined;
    performer: CPIDBObject | undefined;
    activityCreator: CPIDBObject | undefined;
}
export declare type CPIGeneralActivity = CPIActivity;
export interface CPIOrder extends CPIActivity {
    catalog: CPIDBObject;
    orderItems: CPIOrderItem[];
    orderCenter: BLLOrderCenter;
}
export interface CPIOrderItem extends CPIDBObject {
    portfolioItem: CPIDBObject;
    parentOrder: CPIOrder;
    parent: CPIOrderItem | undefined;
    children: CPIOrderItem[];
}
export interface CPIEmployee extends CPIDBObject {
    externalID: string;
    email: string;
    firstName: string;
    lastName: string;
}
export interface CPIPortfolioItem extends CPIDBObject {
    externalID: string;
}
/**
 *  Convert a activityType to ResourceType
 *   Order: 2,
 *   GeneralActivity: 99,
 *   Account: 35,
 *   ContactPerson: 33
 * @param type
 */
export declare function activityType2ResourceType(type: number): ResourceType;
/**
 *  Convert a resourceType to DB_DBObjectType
 * @param type
 */
export declare function resourceType2DBObjectType(type: ResourceType): number;
/**
 *  Convert a resourceType to DB_DBObjectType
 * @param type
 */
export declare function dbObjectType2ResourceType(type: number): ResourceType;
export declare class DBObjectManager {
    getByUUID(type: number, uuid: string): Promise<CPIDBObject | undefined>;
    convertApiValue(type: number, value: string): string | number | null;
}
