export declare class AddonLoader {
    private files;
    private router;
    load(): Promise<void>;
    /**
     * Get all addon cpi-side files from the ADAL table
     * @returns the addons files
     */
    private getAddonFiles;
    /**
     * Get the path to the local addon js file to load
     * This can be overriden when debugging
     * @param addonFile - the addon file object
     * @returns the path to the js file
     */
    private getFilePath;
    /**
     * Load a addons cpi-side code by requiring its file and calling the async load function.
     * Additionally if the addon has a router exported, this gets called as well
     * @param obj The AddonFile object
     */
    private loadFile;
    private setupRouter;
    /**
     * Execute a Addon Api call by passing it to the addons router if it exists
     * @param url the API call url
     * @param method The HTTP method
     * @param body The body of the call if it exists
     * @returns
     */
    executeAddonApi(url: string, method: string, body: string): Promise<any>;
    /**
     * Creates a final handler next function for the router call.
     * This function is the last function in the middleware chain
     * If will set the response to 404 (not found) if no handlers were called
     * Or 400 (BadRequest) if an error is thrown
     * @param req the Request object
     * @param res the Response Object
     * @returns A NextFunction function
     */
    private finalHandler;
}
