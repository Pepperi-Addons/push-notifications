import { DataView, DataViewContext } from '@pepperi-addons/papi-sdk/dist/entities';
import { DataObject, UIField } from '.';
/**
 * Represents a object used to customize the application layout.
 *
 * Can be used for menus, forms, items in lists etc.
 *
 * You can change propeties on the {@link UIObject} and it's fields to dynamicaly control the Application Layout.
 *
 * This is done by intercepting the 'RecalculateUIObject' event, and modifying the UIObject found on the `data.UIObject`.
 *
 * #### example
 * ```typescript
 * pepperi.events.intercept('RecalculateUIObject', {
 *     UIObject: {
 *         context: {
 *             Name: 'UserHomePage' // intercept events that data.UIObject.context.Name === 'UserHomePage'
 *         }
 *     }
 * }, async (data) => {
 *     // randomly hide fields in the home screen for fun
 *     for (const field of data.UIObject?.fields ?? []) {
 *         field.visible = Math.random() < 0.5;
 *     }
 * })
 * ```
 */
export declare class UIObject {
    /**
     * The UIObject Key
     */
    get key(): string;
    /**
     * Get the UIObject dataView
     */
    get dataView(): DataView;
    /**
     * Get the UIObject dataView context.
     * @info This is substantially faster than calling `dataView.Context`
     */
    get context(): DataViewContext;
    /**
     * Get the {@link UIObject}'s dataObject
     * This will return undefined for {@link UIObject} that don't have a dataObject (eg. UserHomePage)
     */
    get dataObject(): DataObject | undefined;
    /**
     * Get the UIObject fields.
     */
    get fields(): UIField[];
    /**
     * If the {@link UIObject} is mark as {@link UIObject.highlighted | highlighted} - this property defines the color in hexadecimal
     * eg. #A5EBFF (The blue color for campaign item is the cart)
     */
    get backgroundColor(): string;
    set backgroundColor(value: string);
    /**
     * Should the UIObject be editable
     *
     * @info if this returns true, then the readonly field on each {@link UIField} is irrelevant
     */
    get readonly(): boolean;
    set readonly(value: boolean);
    /**
     * Recalculate the UIObject
     *
     * This passes over all the {@link UIField}'s and sets their values from the {@link DataObject}.
     *
     * Emits the `RecalculateUIObject` event
     */
    recalculate(): Promise<void>;
    /**
     * Get UIField by FieldID
     * @param fieldID the FieldID of the UIField you want to get
     * @returns the UIFeild or undefined if none such exists
     */
    getField(fieldID: string): Promise<UIField | undefined>;
    /**
     * Set a field's value
     *
     * This is different than setting the field value directly on the `dataObject` using {@link DataObject.setFieldValue}
     * because this function involves the application logic.
     *
     * For example: if {@link Field.readonly | readonly} is `true`, the set will not work (no error is thrown).
     * Additionaly if this field is not customized on the {@link UIObject} the set will not work (on error is thrown - undefined will be returned)
     * @param fieldID The field ID
     * @param value The value to set
     * @param save Should the object be saved in the DB, if set to true {@link UIObject.reloadDataObject} will not undo this change
     * @returns The field or undefined if it is not customized
     */
    setFieldValue(fieldID: string, value: string, save?: boolean): Promise<UIField | undefined>;
    /**
     * Reload the dataObject from the DB
     * Only applies to changes that haven't been saved to the DB yet
     */
    reloadDataObject(): Promise<void>;
    /**
     * Override the toJSON function
     * This will be called when calling JSON.stringify function
     */
    toJSON(): {
        Key: string;
        DataObject: any;
        DataView: DataView;
        Fields: {
            Title: string;
            FieldID: string;
            Value: string;
            FormattedValue: string;
            Readonly: boolean;
            Mandatory: boolean;
            Visible: boolean;
            Accessory: string;
            DecimalDigits: number;
            OptionalValues: {
                Key: string;
                Value: string;
            }[];
            Highlighted: boolean;
            TextColor: string;
            BackgroundColor: string;
            Events: {
                [key: string]: {
                    Key: string;
                    Data: any;
                };
            };
        }[];
        Readonly: boolean;
    };
}
